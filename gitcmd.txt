GITHUB COMMANDS:

git config --global user.name "rodrigozuniga"
git config --global user.email "rodrigozuniga@gmail.com"
git config --global alias.br branch
git config --global alias.logall "log --all --graph"                            :for alias, options go inside quotes
git config --get user.name
git config -l                                                                   :list all values

git clone https://github.com/rodrigozuniga/dev_basic.git
git remote add origin url                                                       :adding remote with url does not give push rights
git remote remove origin                                                        :remove remote branch
git remote -v: show url for remote repository/branch
git remote show origin                                                          :gives information about remote branch

git log --all
git log --graph 
git log --oneline -2                                                            :show only last two commits
git log --all --graph --oneline
git log remotes/origin/main                                                     :there might be differences in logs due to amends

git status
git status -s                                                                   :short status

git add . 
git stage 
git diff --staged                                                               :compare staged with previouly commited
git diff HEAD stagedFile                                                        :compare head with staged file
git diff HEAD                                                                   :show all differences, staged or not
git reset                                                                       :unstage files that were to be commited.

git commit -am "memorandum"
git commit --amend -m 'ammended comment for last commit'                        :produces divergence with remote tree since github has old commit that we are ammending
git commit --amend --noedit                                                     :ammend with changed file, do not change message

git push origin main --set-upstream                                             :match remote and local branch, after you can just use git push
git push origin main -f                                                         :force and override remote branch
git push -f 

git fetch                                                                       :update local version of remote branches

git pull origin main                                                            :pull branch main in remote repository into local branch main
git pull origin main --set up-stream                                            :set default for git pull, just as for git push, then just use git pull

git merge feature1                                                              :merge is always on the current branch, on the checkout branch.
git merge feature1 -m 'memorandum message'                                      :merge includes a commit so a memorandum message is required

git ls-tree branchname                                                          : list of files on branch
git branch branchname                                                           : create branch branchname
git diff main branchname
git diff main remotes/origin/main                                               :difference with remote branch

git tag tagname  606c6d6f
git tag -am 'message' tagname  606c6d6f
git show tagname: to see message
git tag
git push origin master --tags: push tags remotely
git push -d origin featureX: push and delete branch
git push --set-upstream origin featureX                                         :creates tracking branch
git push 
git show head
git show main
git checkout 606c6d6f: checkout a commit
git checkout -b branchname: create & checkout branch
git reflog branchname: show only unique commits to the branch
git branch -d/-D branchname: delete,force Delete branch. Force Delete can cause dangling commits.
git merge --no-ff featureX: force creation of merge rather that fast fwd merge to have all history.
git merge --squash branchname: squash commits in branch to a single one.
git rebase -i b4c84773 : interactive rebase
NETWORK COMMANDS: Clone,Fetch,Pull,Push
git merge fetch_head 

ATBBxHNYaVLMav44c5rgCW2wSgbzA521A2C7
