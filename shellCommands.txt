##BASIC MAC 
SHELL COMMANDS:
#!/bin/bash

#OPERATORS:
&   &&   (   )   ;   ;;   <newline>   |   ||
( and ) are used to group commands and launch them in a subshell
{ and } also group commands, but do not launch them in a subshell.
& runs command in the background
&& only runs second command if first runs successfuly

#NETWORK:
#get single file from github raw
curl https://raw.githubusercontent.com/rodrigozuniga/firstRProject/origin/first_script.R >first_script.R

scp <file><user>@<host>:/remote/path

arp -a : ip addresses on the network
who
uname -r: OS Linux version

#HELP: - not always consistent -
man ls
ps --help #tend to be shorter

#HISTORY:
history 100: list last 100 commands
<r>
~/.bash_history
~/.zsh_history
cat ~/.zsh_history|grep brew

#CLI EDITING: <> for cntl key
<a> :start of line
<e> :end of line
<u> :delete line
<U> :erase to end of line
<K> :erase to start of line

opt + -> :jump to next word 
opt + <- :jump to previous word

#SPLIT SCREEN:
run command tmux
1st)<b>
2nd)% or " or o for vertical,horizontal or switch window 
view menu:
<d>
shift<d>

#DIRECTORIES:
cd -  :go back to previous directory, toggle
mkdir -p dir/dir1/dir2/dir3
rmdir :remove directory
rm -r :recursive
cp -Rv dir newdir :recursive and verbose
chown user:group filename: change ownership
chmod 777 filename
du -h foldername : estimate folder disk space

#PROCESS
ps
kill xxxx
top
top -o rsize
<d>: exit current shell
time ls -al: run and time process
#check port association:
lsof -i:8080

#FILE TYPE
file filename

#FIND:
find -H trends*
find . -maxdepth 2 -iname 'trends*'
find . 'trends*' -prune :avoid going into sub-directories files
locate filename: requires to first create a database/table 

#OPERATORS:
cat <<< "hello there $x" :pass string but evaluates first. Only works with double quote.
cat <<< "hello there 
         this will pass 
         multiple lines"

#WC:
wc -lwc filename
uniq diff1 :returns unique rows in file
uniq -c diff1 :returns unique rows and row count in file 

#LIST:
ls -R :recursive to subdirectories
ls -a
ls -l: first letter of permission is file type
ls -S :sort by size
ls -t :sort by time modified
ls -F :add / to directories
ls -C
ls -G :color coded
ls -d */

#TYPE:
echo ${(t)aa}

#VARIABLES ASSIGNMENT:
n=rzc
`read -r a1 b1 <<< "1 2"`     
#prompt and capture IIivalue into variable(s)
read -p 'enter your name" ' FIRSTNAME LASTNAME
echo your name is $FIRSTNAME
#values passed to script
echo $1
echo $2
echo $3
#remove varible
unset varname
export: list of defined variables
export a=1 : set variable for every sub process to be launched

#FUNCTION:
#!/bin/bash
Hello () {
 echo "hello World"
 echo "hello $1"
}
#to run function with variable:
Hello Rodrigo
#to see function:
declare -f Hello


#ARRAY:
unix[1]='Red Hat'
unix[2]='Ubuntu'
unix[3]='Centos'
unix[4]='Mint'
echo ${(t)unix}
#associative array
declare -A userinfo
echo ${(t)userinfo}
userinfo["first name"]='Rodrigo'
userinfo["last name"]='Zuniga'
userinfo["age"]=17
echo $#userinfo : number of elements
echo $userinfo[@]
declare -A user
user=(fist_nameRodrigo last_name Zuniga age 17)
echo ${(k)user}  : get keys
echo ${(kv)user} : get keys and values 

#DATETIME/UNIXDATETIME:
cal 1967
date +%T
date +%Y
date +%m
date +%b
date +%B
date +%d
date +%S
date +%Z
date +%z
gdate +%S.%N (after installing coreutils with brew)

date +"%Y-%m-%d"
date +"%Y-%m-%d %H:%M:%S %Z"
date +%s : current epoch time
date -r 1657658543 : convert epoch to datetime:wq

#IF
if [ 10 -lt 13 ] 
then    echo 10 is less than 13
fi

#RANGE or SEQUENCE
seq 10

#LOOPS:
for i in 'one','two','three','four'
do
    echo $i
done
for j in `seq 0 2 50 `
do 
    echo $j
done-
for (i,j) in [{A..Z},{a..z}]
do
    echo $i$j
done

#SOLVE FIRST:
a='hello'
b='there'
echo $a $b
echo the time is `date`

#PROCESS:
ps
kill xxxx
<z>+bg:put process in background
fg ps_id 
file.sh & :run in background
top -n 5: info in top 5 ps in cpu usage-n 

#CALCULATION:
echo 6+7|bc
echo 6/4|bc -l
expr 6 + 7 (need space between numbers and operator) 

#WC:
wc -lwc filename

#GREP:
grep -v staff cols: exclude pattern
grep -wv staff cols : exclude but only as complete words

#SORT:
sort sortfile
sort --reverse sortfile
sort --field-separator="\t" cols --key=6|head

#RANDOM:
brew install coreutils: shuf becomes gshuf
gshuf -i 1-10: shuffle complete range
gshuf -i 1-10 -n 1: shuffle but returns only one number
#in Susse:
 cat file1|shuf : shuffle lines
 shuf -i 1-10 : shuffle range, one by line


#SELECT COLUMNS:
awk -F"  " '{print $3}' cols
awk '/rwxrwxrwx/ {print $1}' cols :select column 1 equal to rwxrwxrwx (awk options 'pattern {action}') 
cut -d " " -f 1 cols		  :select field 1
cut -c 1-11 cols 		  :select columns 1 to 11
#Display by columns:
column -st " " fileCols

#SUM COLUMN:
awk '{print $5}' cols|awk '{total=total+$1}END{print total}'

#TEXT:
#substitution
cut -d " " -f 1 cols|sed 's/r/x/'
#substring
str="Rodrigo Zuniga"
echo ${str:0:7}
echo $str|cut -c 1-7
#translate:
cat cols|tr ' ' '\n': one line for each word in the file
printf "%7.3f\n" "213"
printf "%7.3d\n" 213 112 123
a=100.2345
printf "%7.2f\n" $a
printf "it is $a \n" : variable is replaced by its value
printf "it is %s and %s %s \n" "777" "808" "for each one"
#SED: multiple replacements
  sed 's/0/7/gi; s/2/7/gi; s/6/7/gi; s/4/7/gi; s/3/7/gi' fileCols3        
  sed -i 's/0/7/gi' : replace file on site       

#DIFF:
diff diff1 diff2
diff -u diff1 diff2
diff -c diff1 diff2 : put ! next to each line that is not included in the other file

#FLOW:
cat diff1|tee >(wc)|grep lin : pass flow to both wc and to grep

#COMPRESSION:
zip newfilename filename
zip newfoldername foldername
#password protected:
zip -re dev_basic_compress_pwd dev_basic
#create multiple files of size 1g
zip -s 1g -r downloads_compress Downloads

#CURL:
curl http://example.com --output my.file --silent


#SPREADSHEET:
visidata --delimiter=" " filename
vd --delimiter=" " filename

#SQL
brew install q
q "select count(*) from cols"
q "select sum(c5) from cols"
q "select c5,count(*) from cols where c5>10000 group by 1"
q "select c4,count(*) over (partition by c4 order by c4) from cols"

#CSVKIT:
 sudo apt install csvkit
 csvlook transactions.csv
 csvcut -c 1,2,3 transactions.csv|head
 csvcut -c 1 transactions.csv|csvstat
 head transactions.csv|csvsort -c product_id -r
 head transactions.csv|csvgrep -c product_id -m 1222

#SQLITE:
.open chinook.db
.tables
.mode csv
.import city.csv cities
pragma table_info('invoices')
.header on
.mode column
<d> :quit

#MYSQL:
brew install mysql 
brew start process mysql
mysql -uroot
source ./mysqlsampledatabase.sql : create database
